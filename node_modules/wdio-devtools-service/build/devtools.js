'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _chromeRemoteInterface = require('chrome-remote-interface');

var _chromeRemoteInterface2 = _interopRequireDefault(_chromeRemoteInterface);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RE_DEVTOOLS_DEBUGGING_PORT_SWITCH = /--remote-debugging-port=(\d*)/;
var RE_USER_DATA_DIR_SWITCH = /--user-data-dir=([^-]*)/;

var DevToolsService = function () {
    function DevToolsService() {
        (0, _classCallCheck3.default)(this, DevToolsService);
    }

    (0, _createClass3.default)(DevToolsService, [{
        key: 'beforeSession',
        value: function beforeSession(_, caps) {
            if (caps.browserName !== 'chrome' || caps.version && caps.version < 63) {
                console.error('The wdio-devtools-service currently only supports Chrome version 63 and up');
            }
        }
    }, {
        key: 'before',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var _this = this;

                var _client, host, port;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this._findChromePort();

                            case 2:
                                this.chromePort = _context.sent;
                                _context.next = 5;
                                return this._getCDPClient(this.chromePort);

                            case 5:
                                this.client = _context.sent;


                                /**
                                 * allow to easily access the CDP from the browser object
                                 */
                                browser.addCommand('cdp', function (domain, command) {
                                    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

                                    if (!_this.client[domain]) {
                                        throw new Error(`Domain "${domain}" doesn't exist in the Chrome DevTools protocol`);
                                    }

                                    if (!_this.client[domain][command]) {
                                        throw new Error(`The "${domain}" domain doesn't have a method called "${command}"`);
                                    }

                                    return new _promise2.default(function (resolve, reject) {
                                        return _this.client[domain][command](args, function (err, result) {
                                            if (err) {
                                                return reject(new Error(`Chrome DevTools Error: ${result.message}`));
                                            }

                                            return resolve(result);
                                        });
                                    });
                                });

                                /**
                                 * helper method to receive Chrome remote debugging connection data to
                                 * e.g. use external tools like lighthouse
                                 */
                                _client = this.client, host = _client.host, port = _client.port;

                                browser.addCommand('cdpConnection', function () {
                                    return { host, port };
                                });

                                /**
                                 * propagate CDP events to the browser event listener
                                 */
                                this.client.on('event', function (event) {
                                    return browser.emit(event.method || 'event', event.params);
                                });

                            case 10:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function before() {
                return _ref.apply(this, arguments);
            }

            return before;
        }()

        /**
         * Find Chrome DevTools Interface port by checking Chrome switches from the chrome://version
         * page. In case a newer version is used (+v65) we check the DevToolsActivePort file
         */

    }, {
        key: '_findChromePort',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var cmdLineText, port, userDataDir, devToolsActivePortFile;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.prev = 0;
                                _context2.next = 3;
                                return browser.url('chrome://version');

                            case 3:
                                _context2.next = 5;
                                return browser.getText('#command_line');

                            case 5:
                                cmdLineText = _context2.sent;
                                port = parseInt(cmdLineText.match(RE_DEVTOOLS_DEBUGGING_PORT_SWITCH)[1]);

                                if (!(port === 0)) {
                                    _context2.next = 12;
                                    break;
                                }

                                userDataDir = cmdLineText.match(RE_USER_DATA_DIR_SWITCH)[1].trim();
                                devToolsActivePortFile = _fs2.default.readFileSync(_path2.default.join(userDataDir, 'DevToolsActivePort'), 'utf8');

                                port = parseInt(devToolsActivePortFile.split('\n').shift(), 10);
                                return _context2.abrupt('return', port);

                            case 12:
                                _context2.next = 17;
                                break;

                            case 14:
                                _context2.prev = 14;
                                _context2.t0 = _context2['catch'](0);

                                console.log(`Could not connect to chrome`);

                            case 17:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this, [[0, 14]]);
            }));

            function _findChromePort() {
                return _ref2.apply(this, arguments);
            }

            return _findChromePort;
        }()
    }, {
        key: '_getCDPClient',
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(port) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                return _context3.abrupt('return', new _promise2.default(function (resolve) {
                                    return (0, _chromeRemoteInterface2.default)({
                                        port,
                                        host: 'localhost',
                                        target: function target(targets) {
                                            return targets.findIndex(function (t) {
                                                return t.type === 'page';
                                            });
                                        }
                                    }, resolve);
                                }));

                            case 1:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function _getCDPClient(_x2) {
                return _ref3.apply(this, arguments);
            }

            return _getCDPClient;
        }()
    }]);
    return DevToolsService;
}();

exports.default = DevToolsService;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9kZXZ0b29scy5qcyJdLCJuYW1lcyI6WyJSRV9ERVZUT09MU19ERUJVR0dJTkdfUE9SVF9TV0lUQ0giLCJSRV9VU0VSX0RBVEFfRElSX1NXSVRDSCIsIkRldlRvb2xzU2VydmljZSIsIl8iLCJjYXBzIiwiYnJvd3Nlck5hbWUiLCJ2ZXJzaW9uIiwiY29uc29sZSIsImVycm9yIiwiX2ZpbmRDaHJvbWVQb3J0IiwiY2hyb21lUG9ydCIsIl9nZXRDRFBDbGllbnQiLCJjbGllbnQiLCJicm93c2VyIiwiYWRkQ29tbWFuZCIsImRvbWFpbiIsImNvbW1hbmQiLCJhcmdzIiwiRXJyb3IiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyIiwicmVzdWx0IiwibWVzc2FnZSIsImhvc3QiLCJwb3J0Iiwib24iLCJldmVudCIsImVtaXQiLCJtZXRob2QiLCJwYXJhbXMiLCJ1cmwiLCJnZXRUZXh0IiwiY21kTGluZVRleHQiLCJwYXJzZUludCIsIm1hdGNoIiwidXNlckRhdGFEaXIiLCJ0cmltIiwiZGV2VG9vbHNBY3RpdmVQb3J0RmlsZSIsImZzIiwicmVhZEZpbGVTeW5jIiwicGF0aCIsImpvaW4iLCJzcGxpdCIsInNoaWZ0IiwibG9nIiwidGFyZ2V0IiwidGFyZ2V0cyIsImZpbmRJbmRleCIsInQiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsb0NBQW9DLCtCQUExQztBQUNBLElBQU1DLDBCQUEwQix5QkFBaEM7O0lBRXFCQyxlOzs7Ozs7O3NDQUNGQyxDLEVBQUdDLEksRUFBTTtBQUNwQixnQkFBSUEsS0FBS0MsV0FBTCxLQUFxQixRQUFyQixJQUFrQ0QsS0FBS0UsT0FBTCxJQUFnQkYsS0FBS0UsT0FBTCxHQUFlLEVBQXJFLEVBQTBFO0FBQ3RFQyx3QkFBUUMsS0FBUixDQUFjLDRFQUFkO0FBQ0g7QUFDSjs7Ozs7Ozs7Ozs7Ozs7dUNBRzJCLEtBQUtDLGVB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OztrQkFsRU1qQixlIiwiZmlsZSI6ImRldnRvb2xzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENEUCBmcm9tICdjaHJvbWUtcmVtb3RlLWludGVyZmFjZSdcbmltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmNvbnN0IFJFX0RFVlRPT0xTX0RFQlVHR0lOR19QT1JUX1NXSVRDSCA9IC8tLXJlbW90ZS1kZWJ1Z2dpbmctcG9ydD0oXFxkKikvXG5jb25zdCBSRV9VU0VSX0RBVEFfRElSX1NXSVRDSCA9IC8tLXVzZXItZGF0YS1kaXI9KFteLV0qKS9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV2VG9vbHNTZXJ2aWNlIHtcbiAgICBiZWZvcmVTZXNzaW9uIChfLCBjYXBzKSB7XG4gICAgICAgIGlmIChjYXBzLmJyb3dzZXJOYW1lICE9PSAnY2hyb21lJyB8fCAoY2Fwcy52ZXJzaW9uICYmIGNhcHMudmVyc2lvbiA8IDYzKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVGhlIHdkaW8tZGV2dG9vbHMtc2VydmljZSBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBDaHJvbWUgdmVyc2lvbiA2MyBhbmQgdXAnKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgYmVmb3JlICgpIHtcbiAgICAgICAgdGhpcy5jaHJvbWVQb3J0ID0gYXdhaXQgdGhpcy5fZmluZENocm9tZVBvcnQoKVxuICAgICAgICB0aGlzLmNsaWVudCA9IGF3YWl0IHRoaXMuX2dldENEUENsaWVudCh0aGlzLmNocm9tZVBvcnQpXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFsbG93IHRvIGVhc2lseSBhY2Nlc3MgdGhlIENEUCBmcm9tIHRoZSBicm93c2VyIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgYnJvd3Nlci5hZGRDb21tYW5kKCdjZHAnLCAoZG9tYWluLCBjb21tYW5kLCBhcmdzID0ge30pID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jbGllbnRbZG9tYWluXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRG9tYWluIFwiJHtkb21haW59XCIgZG9lc24ndCBleGlzdCBpbiB0aGUgQ2hyb21lIERldlRvb2xzIHByb3RvY29sYClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLmNsaWVudFtkb21haW5dW2NvbW1hbmRdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgXCIke2RvbWFpbn1cIiBkb21haW4gZG9lc24ndCBoYXZlIGEgbWV0aG9kIGNhbGxlZCBcIiR7Y29tbWFuZH1cImApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB0aGlzLmNsaWVudFtkb21haW5dW2NvbW1hbmRdKGFyZ3MsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYENocm9tZSBEZXZUb29scyBFcnJvcjogJHtyZXN1bHQubWVzc2FnZX1gKSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHQpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgfSlcblxuICAgICAgICAvKipcbiAgICAgICAgICogaGVscGVyIG1ldGhvZCB0byByZWNlaXZlIENocm9tZSByZW1vdGUgZGVidWdnaW5nIGNvbm5lY3Rpb24gZGF0YSB0b1xuICAgICAgICAgKiBlLmcuIHVzZSBleHRlcm5hbCB0b29scyBsaWtlIGxpZ2h0aG91c2VcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IHsgaG9zdCwgcG9ydCB9ID0gdGhpcy5jbGllbnRcbiAgICAgICAgYnJvd3Nlci5hZGRDb21tYW5kKCdjZHBDb25uZWN0aW9uJywgKCkgPT4gKHsgaG9zdCwgcG9ydCB9KSlcblxuICAgICAgICAvKipcbiAgICAgICAgICogcHJvcGFnYXRlIENEUCBldmVudHMgdG8gdGhlIGJyb3dzZXIgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xpZW50Lm9uKCdldmVudCcsIChldmVudCkgPT4gYnJvd3Nlci5lbWl0KGV2ZW50Lm1ldGhvZCB8fCAnZXZlbnQnLCBldmVudC5wYXJhbXMpKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgQ2hyb21lIERldlRvb2xzIEludGVyZmFjZSBwb3J0IGJ5IGNoZWNraW5nIENocm9tZSBzd2l0Y2hlcyBmcm9tIHRoZSBjaHJvbWU6Ly92ZXJzaW9uXG4gICAgICogcGFnZS4gSW4gY2FzZSBhIG5ld2VyIHZlcnNpb24gaXMgdXNlZCAoK3Y2NSkgd2UgY2hlY2sgdGhlIERldlRvb2xzQWN0aXZlUG9ydCBmaWxlXG4gICAgICovXG4gICAgYXN5bmMgX2ZpbmRDaHJvbWVQb3J0ICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIudXJsKCdjaHJvbWU6Ly92ZXJzaW9uJylcbiAgICAgICAgICAgIGNvbnN0IGNtZExpbmVUZXh0ID0gYXdhaXQgYnJvd3Nlci5nZXRUZXh0KCcjY29tbWFuZF9saW5lJylcbiAgICAgICAgICAgIGxldCBwb3J0ID0gcGFyc2VJbnQoY21kTGluZVRleHQubWF0Y2goUkVfREVWVE9PTFNfREVCVUdHSU5HX1BPUlRfU1dJVENIKVsxXSlcbiAgICAgICAgICAgIGlmIChwb3J0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlckRhdGFEaXIgPSBjbWRMaW5lVGV4dC5tYXRjaChSRV9VU0VSX0RBVEFfRElSX1NXSVRDSClbMV0udHJpbSgpXG4gICAgICAgICAgICAgICAgY29uc3QgZGV2VG9vbHNBY3RpdmVQb3J0RmlsZSA9IGZzLnJlYWRGaWxlU3luYyhwYXRoLmpvaW4odXNlckRhdGFEaXIsICdEZXZUb29sc0FjdGl2ZVBvcnQnKSwgJ3V0ZjgnKVxuICAgICAgICAgICAgICAgIHBvcnQgPSBwYXJzZUludChkZXZUb29sc0FjdGl2ZVBvcnRGaWxlLnNwbGl0KCdcXG4nKS5zaGlmdCgpLCAxMClcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9ydFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb3VsZCBub3QgY29ubmVjdCB0byBjaHJvbWVgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgX2dldENEUENsaWVudCAocG9ydCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IENEUCh7XG4gICAgICAgICAgICBwb3J0LFxuICAgICAgICAgICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gICAgICAgICAgICB0YXJnZXQ6ICh0YXJnZXRzKSA9PiB0YXJnZXRzLmZpbmRJbmRleCgodCkgPT4gdC50eXBlID09PSAncGFnZScpXG4gICAgICAgIH0sIHJlc29sdmUpKVxuICAgIH1cbn1cbiJdfQ==